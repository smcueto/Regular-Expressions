//1. includes words that contain the letters abc
  [abc]

//2. includes all digits starting from 1 and up
  \d+

//3. includes everything
  \.

//4. includes only letters that contain cmf
  [cmf]

//5. includes everything but bog
  [^bog]

//6.Character ranges. The pattern [0-6] will only match any single digit character from zero to six, and nothing else. And likewise, [^n-p] will only match any single character except for letters n to p.Multiple character ranges can also be used in the same set of brackets, along with individual characters.character range [A-Za-z0-9_] and often used to match characters in English text.
  [A-C]

//7.Catching some zzz's. This quantifier can be used with any character, or special metacharacters, for example w{3} (three w's), [wxy]{5} (five characters, each of which can be a w, x, or y) and .{2,6} (between two and six of any character).
  [z]{3,5}

//8.Mr. Kleene, Mr. Kleene. to match the donations above, we can use the pattern \d* to match any number of digits, but a tighter regular expression would be \d+ which ensures that the input string has at least one digit.
These quantifiers can be used with any character or special metacharacters, for example a+ (one or more a's), [abc]+ (one or more of any a, b, or c character) and .* (zero or more of any character).
  c+

//9.Characters optional. ? (question mark) metacharacter which denotes optionality. This metacharacter allows you to match either zero or one of the preceding character or group. For example, the pattern ab?c will match either the strings "abc" or "ac" because the b is considered optional.
  \?

//10.All this whitespace. The most common forms of whitespace you will use with regular expressions are the space (‚ê£), the tab (\t), the new line (\n) and the carriage return (\r) (useful in Windows environments), and these special characters match each of their respective whitespaces. In addition, a whitespace special character \s will match any of the specific whitespaces above and is extremely useful when dealing with raw input text.
  (\s)

//11.Starting and ending. One way to tighten our patterns is to define a pattern that describes both the start and the end of the line using the special ^ (hat) and $ (dollar sign) metacharacters. In the example above, we can use the pattern ^success to match only a line that begins with the word "success", but not the line "Error: unsuccessful operation". And if you combine both the hat and the dollar sign, you create a pattern that matches the whole line completely at the beginning and end.
  ^Mission$

//12.Match groups
